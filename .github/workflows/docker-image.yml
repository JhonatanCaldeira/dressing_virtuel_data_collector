name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  docker-compose-build:
    runs-on: ubuntu-latest
    container:
      image: jhonatancaldeira/python-base:3.10
      options: --entrypoint ""

    services:
      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd="rabbitmq-diagnostics -q ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2
          
      - name: Pass secrets as environment variables
        run: |
          echo "IMAGE_TMP_DIR=${{ secrets.IMAGE_TMP_DIR }}" >> .env
          echo "IMAGE_STORAGE_DIR=${{ secrets.IMAGE_STORAGE_DIR }}" >> .env
          echo "BROKER_SERVER=${{ secrets.BROKER_SERVER }}" >> .env
          echo "PG_DB_HOST=${{ secrets.PG_DB_HOST }}" >> .env
          echo "PG_DB_USER=${{ secrets.PG_DB_USER }}" >> .env
          echo "PG_DB_PORT=${{ secrets.PG_DB_PORT }}" >> .env
          echo "PG_DB_NAME=${{ secrets.PG_DB_NAME }}" >> .env
          echo "PG_DB_PASSWORD=${{ secrets.PG_DB_PASSWORD }}" >> .env
          echo "MODELS_API_KEY=${{ secrets.MODELS_API_KEY }}" >> .env
          echo "MODELS_API_SERVER=${{ secrets.MODELS_API_SERVER }}" >> .env
          echo "MODELS_API_PORT=${{ secrets.MODELS_API_PORT }}" >> .env
          echo "MODELS_API_ENDPOINT=${{ secrets.MODELS_API_ENDPOINT }}" >> .env
          echo "PG_API_ENDPONT=${{ secrets.PG_API_ENDPONT }}" >> .env
          echo "PG_API_SERVER=${{ secrets.PG_API_SERVER }}" >> .env
          echo "PG_API_PORT=${{ secrets.PG_API_PORT }}" >> .env
          echo "PG_API_KEY=${{ secrets.PG_API_KEY }}" >> .env
          echo "CELERY_API_ENDPONT=${{ secrets.CELERY_API_ENDPONT }}" >> .env
          echo "CELERY_API_SERVER=${{ secrets.CELERY_API_SERVER }}" >> .env
          echo "CELERY_API_PORT=${{ secrets.CELERY_API_PORT }}" >> .env
          echo "CELERY_API_KEY=${{ secrets.CELERY_API_KEY }}" >> .env
          echo "OBJ_DETECTION_MODEL_NAME=${{ secrets.OBJ_DETECTION_MODEL_NAME }}" >> .env
          echo "CLASSIFICATION_MODEL_NAME=${{ secrets.CLASSIFICATION_MODEL_NAME }}" >> .env
          echo "SEGMENTATION_MODEL_NAME=${{ secrets.SEGMENTATION_MODEL_NAME }}" >> .env
          cat .env

      - name: Build models_api image
        run: |
          docker build -t models_api .

      - name: Run models_api container
        run: |
          docker run -d --name models_api \
            -p 5005:5005 -p 5000:5000 -p 5010:5010 \
            -e IMAGE_TMP_DIR=${{ secrets.IMAGE_TMP_DIR }} \
            -e IMAGE_STORAGE_DIR=${{ secrets.IMAGE_STORAGE_DIR }} \
            -e BROKER_SERVER=${{ secrets.BROKER_SERVER }} \
            --link rabbitmq:rabbitmq \
            models_api

      - name: Verify models_api is running
        run: |
          docker ps -a
          docker exec models_api curl -I http://localhost:5005 || exit 1

      - name: Teardown
        run: |
          docker stop models_api
          docker rm models_api
          docker-compose down

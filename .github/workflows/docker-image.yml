name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  docker-compose-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pass secrets as environment variables
        run: |
          mkdir config/
          cd config/
          echo "IMAGE_TMP_DIR=${{ secrets.IMAGE_TMP_DIR }}" >> .env
          echo "IMAGE_STORAGE_DIR=${{ secrets.IMAGE_STORAGE_DIR }}" >> .env
          echo "BROKER_SERVER=${{ secrets.BROKER_SERVER }}" >> .env
          echo "PG_DB_HOST=${{ secrets.PG_DB_HOST }}" >> .env
          echo "PG_DB_USER=${{ secrets.PG_DB_USER }}" >> .env
          echo "PG_DB_PORT=${{ secrets.PG_DB_PORT }}" >> .env
          echo "PG_DB_NAME=${{ secrets.PG_DB_NAME }}" >> .env
          echo "PG_DB_PASSWORD=${{ secrets.PG_DB_PASSWORD }}" >> .env
          echo "MODELS_API_KEY=${{ secrets.MODELS_API_KEY }}" >> .env
          echo "MODELS_API_SERVER=${{ secrets.MODELS_API_SERVER }}" >> .env
          echo "MODELS_API_PORT=${{ secrets.MODELS_API_PORT }}" >> .env
          echo "MODELS_API_ENDPOINT=${{ secrets.MODELS_API_ENDPOINT }}" >> .env
          echo "PG_API_ENDPONT=${{ secrets.PG_API_ENDPONT }}" >> .env
          echo "PG_API_SERVER=${{ secrets.PG_API_SERVER }}" >> .env
          echo "PG_API_PORT=${{ secrets.PG_API_PORT }}" >> .env
          echo "PG_API_KEY=${{ secrets.PG_API_KEY }}" >> .env
          echo "CELERY_API_ENDPONT=${{ secrets.CELERY_API_ENDPONT }}" >> .env
          echo "CELERY_API_SERVER=${{ secrets.CELERY_API_SERVER }}" >> .env
          echo "CELERY_API_PORT=${{ secrets.CELERY_API_PORT }}" >> .env
          echo "CELERY_API_KEY=${{ secrets.CELERY_API_KEY }}" >> .env
          echo "OBJ_DETECTION_MODEL_NAME=${{ secrets.OBJ_DETECTION_MODEL_NAME }}" >> .env
          echo "CLASSIFICATION_MODEL_NAME=${{ secrets.CLASSIFICATION_MODEL_NAME }}" >> .env
          echo "SEGMENTATION_MODEL_NAME=${{ secrets.SEGMENTATION_MODEL_NAME }}" >> .env
          cat .env
          cd ..

      - name: Build docker image
        run: |
          VERSION=1.0.${{ github.run_number }}
          IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/dressing_virtuel_data_collector-models_api:$VERSION"
          echo ---Building docker image---
          docker build -t $IMAGE_NAME .
          echo ---Starting up docker---
          docker compose -f docker-compose.yml up -d

      - name: Run test
        run: | 
          echo ---Running test cases---
          docker ps -a
          docker compose exec models_api pytest tests/api_test.py 
          echo ---Completed test cases---  

      - name: Push Docker image to Docker Hub
        run: |
          VERSION=1.0.${{ github.run_number }}
          IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/dressing_virtuel_data_collector-models_api:$VERSION"
          echo ---Pushing Docker image---
          docker push $IMAGE_NAME

name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    # container:
    #   image: jhonatancaldeira/python-base:3.10

    env:
      IMAGE_TMP_DIR: ${{ secrets.IMAGE_TMP_DIR }}
      IMAGE_STORAGE_DIR: ${{ secrets.IMAGE_STORAGE_DIR }}
      BROKER_SERVER: ${{ secrets.BROKER_SERVER }}
      PG_DB_HOST: ${{ secrets.PG_DB_HOST }}
      PG_DB_USER: ${{ secrets.PG_DB_USER }}
      PG_DB_PORT: ${{ secrets.PG_DB_PORT }}
      PG_DB_NAME: ${{ secrets.PG_DB_NAME }}
      PG_DB_PASSWORD: ${{ secrets.PG_DB_PASSWORD }}
      MODELS_API_KEY: ${{ secrets.MODELS_API_KEY }}
      MODELS_API_SERVER: ${{ secrets.MODELS_API_SERVER }}
      MODELS_API_PORT: ${{ secrets.MODELS_API_PORT }}
      MODELS_API_ENDPOINT: ${{ secrets.MODELS_API_ENDPOINT }}
      PG_API_ENDPONT: ${{ secrets.PG_API_ENDPONT }}
      PG_API_SERVER: ${{ secrets.PG_API_SERVER }}
      PG_API_PORT: ${{ secrets.PG_API_PORT }}
      PG_API_KEY: ${{ secrets.PG_API_KEY }}
      CELERY_API_ENDPONT: ${{ secrets.CELERY_API_ENDPONT }}
      CELERY_API_SERVER: ${{ secrets.CELERY_API_SERVER }}
      CELERY_API_PORT: ${{ secrets.CELERY_API_PORT }}
      CELERY_API_KEY: ${{ secrets.CELERY_API_KEY }}
      OBJ_DETECTION_MODEL_NAME: ${{ secrets.OBJ_DETECTION_MODEL_NAME }}
      CLASSIFICATION_MODEL_NAME: ${{ secrets.CLASSIFICATION_MODEL_NAME }}
      SEGMENTATION_MODEL_NAME: ${{ secrets.SEGMENTATION_MODEL_NAME }}

    services:
      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd="rabbitmq-diagnostics -q ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Start Celery Worker
        run: |
          celery -A broker.tasks worker --loglevel=INFO &

      - name: Start FastAPI Server DB
        run: |
          nohup uvicorn api.api_server_db:app --port ${{ secrets.PG_API_PORT }} >  ${{ github.repository }}/api_server_db.log 2>&1 &

      - name: Start FastAPI Models
        run: |
          nohup uvicorn api.api_models:app --port ${{ secrets.MODELS_API_PORT }} >  ${{ github.repository }}/api_models.log 2>&1 &

      - name: Start FastAPI Celery
        run: |
          nohup uvicorn api.api_celery:app --port ${{ secrets.CELERY_API_PORT }} >  ${{ github.repository }}/api_celery.log 2>&1 &

      - name: Pytest Test
        run: |
          pytest tests/api_test.py

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/dressing_virtuel:latest .

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/dressing_virtuel:latest